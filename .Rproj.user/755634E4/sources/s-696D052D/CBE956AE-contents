---
title: "MMA Datathon"
author: "Bill Zizek"
date: "13/11/2020"
output: html_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)

library(tidyverse)
library(corrplot)
library(NISTunits)
```

## Data Ingestion

We're going to read in all our data and make sure the variables are of the correct type - specifically *datetime* is important that it is classified correctly. 

```{r ingest, message=FALSE}
parana_customers <- read_csv("data/parana_customers.csv")
parana_orders <- read_csv("data/parana_orders.csv", 
    col_types = cols(order_purchase_timestamp = col_datetime(format = "%m/%d/%Y %H:%M"), 
        order_approved_at = col_datetime(format = "%m/%d/%Y %H:%M"), 
        order_delivered_carrier_date = col_datetime(format = "%m/%d/%Y %H:%M"), 
        order_delivered_customer_date = col_datetime(format = "%m/%d/%Y %H:%M"), 
        order_estimated_delivery_date = col_datetime(format = "%m/%d/%Y %H:%M")))
parana_order_items <- read_csv("data/parana_order_items.csv", 
    col_types = cols(shipping_limit_date = col_datetime(format = "%m/%d/%Y %H:%M")))
parana_products <- read_csv("data/parana_products.csv")
Parana_LP <- read_csv("data/Parana_LP.csv")
```

## Data Transformation

### Joins

For our modeling, we need to join *all* of the tables together. Starting with the `parana_orders` table, we will join the `parana_customers` table using `customer_id`. Then, we join the `parana_order_items` by `order_id` so that if an order has multiple items - this will be represented by multiple rows (and we can aggregate at a summary level later). Next, we add the `parana_products` table by `product_id` so we can evaluate product characteristics in our model. Finally, we join our logistic partner table `Parana_LP` through equating `State_Served` by LP to where the customer is locatated `customer_state`.

```{r join}
data_all <- parana_orders %>% 
  left_join(parana_customers, by = "customer_id") %>%
  left_join(parana_order_items, by = "order_id") %>% 
  left_join(parana_products, by = "product_id") %>%
  left_join(Parana_LP, by = c("customer_state" = "State_Served")) 

# write_csv(x = data_all, path = "C:/Users/willi/OneDrive/Documents/r-projects/MMA_datathon/data/data_all.csv")
```

### Derived Variables

We need to derive some variables of interest

~1. Order Distance~
~2. Number of items per order~
~3. Dummy variable for late order~
~4. Delivery difference~
5. Product volume --> Order volume

```{r first}
data <- data_all %>% filter(order_status == "delivered")
```

#### Distance
Need to figure out how to handle NAs. There's 222 NAs for seller lat/long and 273 NAs for customer lat/long. So when I do the distance calculation without excluding them I end up with 496 NAs.

```{r distance}
data_dist <- data %>% 
  mutate(distance = acos(cos(NISTdegTOradian(90-customer_lat))*cos(NISTdegTOradian(90-seller_lat))+sin(NISTdegTOradian(90-customer_lat))*sin(NISTdegTOradian(90-seller_lat))*cos(NISTdegTOradian(customer_lng-seller_lng)))*6731)
```

#### Items per order

```{r items/order}
data_numb_items <- data_dist %>% group_by(order_id) %>% add_count(name = "products_per_order")

summary(data_numb_items)
```

#### Difference between Estimate and Actual Delivery

```{r delivery difference}

# positive means that the order is early, negative late
data_deliv_diff <- data_numb_items %>% mutate(order_diff_time = difftime(order_estimated_delivery_date, order_delivered_customer_date, units = "days"))

data_deliv_diff$order_diff_time <- as.numeric(data_deliv_diff$order_diff_time)

```


#### Late Orders

```{r}
data_deliv_late <- data_deliv_diff %>% mutate(late = ifelse(order_diff_time < 0, 1, 0))
```

#### Product Volume

```{r}
data_prod_volume <- data_deliv_late %>% mutate(product_volume_cm = product_length_cm*product_height_cm*product_width_cm)
```

#### Order Volume

```{r}
data_order_volume <- data_prod_volume %>% group_by(order_id) %>% mutate(order_volume = sum(product_volume_cm))
```

#### Order Weight

```{r}
data_order_weight <- data_order_volume %>% group_by(order_id) %>% mutate(order_weight = sum(product_weight_g))
```

#### Delivery Time

```{r}
data_deliv <- data_order_weight %>% mutate(delivery_time = difftime(order_delivered_customer_date, order_purchase_timestamp, units = "days"))

data_deliv$delivery_time <- as.numeric(data_deliv$delivery_time)
```

#### Seller prep time

```{r}
data_pickup <- data_deliv %>% mutate(pickup_time = difftime(order_delivered_carrier_date, order_purchase_timestamp, units = "days"))

data_pickup$pickup_time <- as.numeric(data_pickup$pickup_time)
```


#### Save to Disk

```{r}
data_final <- data_pickup %>% ungroup()
write_csv(x = data_final, path = "C:/Users/willi/OneDrive/Documents/r-projects/MMA_datathon/data/data_final.csv")
```


## Exploratory Data Analysis

### Basic Summary

```{r}
summary(data_final)
tmp <- data.frame(summary(data_final))
write_csv(x = tmp, path = "C:/Users/willi/OneDrive/Documents/r-projects/MMA_datathon/data/data_summary_table.csv")
```


### Colinearity

```{r}
# now we can create our corrplot
data_numeric_only <- data_final %>% ungroup() %>% select_if(is.numeric)
M <- cor(data_numeric_only, use="pairwise.complete.obs")
corrplot(M, method = "number", tl.col = "black", type = "upper")
```


## Modeling

### Regression

```{r}
model = lm(formula = delivery_time ~ distance + products_per_order + LP + order_weight * order_volume, data = data_final)
summary(model)
```

